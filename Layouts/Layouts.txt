LinearLayout:
-> Eklenen component'lerin vertical(dikey) ya da horizontal(yatay) olarak hizalanmasını sağlar.
-> Component'lerin verital mı yoksa horizontal olarak mı ekleneceğini belirtmek için "orientation" attribute'unu    kullanırız.
-> Eğer "orientation" belirtilmez ise default olarak horizontal olarak component'ler hizalanır.

RelativeLayout:
-> Göreceli(ilişkisel) bir konumlandırma sağlar.
-> ConstraintLayout'ta relative bir şekilde tasarım yapabildiğimiz için çok sık bunu tercih etmeyiz.
-> Component'leri birbirlerine göre konumlandırdığımız için her birine id vermeyi unutmamalıyız. Çünkü bu id'leri kullanarak component'leri birbirlerine göre hizalıyoruz.
-> Android 3.3 ile birlikte, RelativeLayout'da bir component'e yatayda ve dikeyde bağlantı verdikten sonra o component'i sürükle-bırak mantığıyla hareket ettirebiliriz.

ConstraintLayout:
-> Daha esnek bir şekilde tasarım yapmamıza olanak sağlayan ve 2016'da hayatımıza girmiş olan Layout çeşitidir.
-> Diğerlerine göre daha iyi bir performansla çalışır.

FrameLayout:
-> View'ları üst üste yerleştirmek için kullanılır.
-> View'lar stack olarak eklenir. Yani son eklenen öğe, en üsttedir. 
-> İkinci eklenen view, ilk eklenen view'ın üstünde gözükür.
-> Genellikle resmin üzerinde yazı göstermek istediğimiz zaman kullanırız.
-> gravity attribute'unu kullanarak child view'ların pozisyonlarını kontrol edebiliriz.
- Genel olarak frame layout'da tek bir childview eklenmesi tavsiye edilir. Bunun sebebi birden fazla child view eklendiğinde farklı ekran boyutlarındaki telefonlarda view'ların üst üste binmesi gibi problemlerin ortaya çıkabileceğidir.

 Neden en çok framelayout for fragments?
- FrameLayout, tek bir view'ı göstermek için en basit ve kullanımı en kolay ViewGroup'dur. Fragment'ı eklemek ve boyutunu ve konumunu ayarlamak için sadece birkaç satır kod yazmanız yeterlidir.  
- FrameLayout, diğer ViewGroup'lara kıyasla daha az karmaşık bir yapıya sahiptir. Bu nedenle, fragment'lar arasında geçiş yaparken daha iyi performans sağlayabilir.

Tablelayout: 
-> İçinde bulunan child view'ları satır ve sutunlarla duzenleyerek tablo oluşturmamızı sağlayan bir layout.

gridlayout: diğer layout'lar gibi bir layout çeşiti. bunun diğerlerinden farkı grid şekilde olacak designler yapmamızı sağlar.

gridview: listview'ın grid görünümlü hali. veriler adapter'dan gelir. 

gridview vs gridlayout: öğeleri statik olacak bir tasarım yapmak için gridview... öğeleri dinamik olacak bir tasarım yapmak için gridlayout...

CoordinatorLayout: Android Design Support Library'nin bir parçasıdır ve özellikle animasyonlu ve etkileşimli kullanıcı arayüzleri için kullanılır. Farklı nesneler arasındaki etkileşimleri yönetmek için kullanışlıdır.

weight sadece linear layoutta mı var?
weight, horizontal'da veritcal uzunluga etki etmez, veritcal'da horizontal uzunluga etki etmez. ayrıca vertical'da weigth'le calisirken, height'a 0 ver, horizontal'da weight'le calisirken width'a 0 ver ki daha performanslı ve daha tutarlı bir çizim yapsın...

gravity -> kendi içine göre konum verir.
layout_gravity -> parent'a göre konum verir.

dp: farklı ekranlarda aynı oranları yakalamamızı sağlar.
sp: cihaz boyutu değişse de sabt kalan boyuttur. text'ler için kullanılır. ekran boyutu arttıkca daha fazla text okunmasını sağlar. 


blueprint: öyle büyük bir avantajı yok. sadece view'ların sınırlarını daha net bir şekilde görebiliriz. mesela imageview'ın. ve de invisible olan view preview'da gözükmezken blueprint'de gözükür.

 add helpers -> group: view'ları gruba koymamı sağlar. artık bu grup üzerinden tüm view'ları kontrol edebilirim.

 baseline: iki view'ın içindeki metinleri aynı hizaya almamızı sağlar.
width veya height'a 0 dp vermemiz, sadece constraintlayout'da mı match_constranint anlamına geliyor? ve bu arada match_constraint ne demek? bizim verdiğimiz constraint'lerle eşleşsin demek dimi?
constraint layout ile complex tasarımları yapmak diğer layoutlara göre daha performanslı bir tasarım yapmamızı saglar.
relative layout'un yaptıgını bu da yapıyor...





