
FindViewById() Methodu Dezavantajları:
    1. Performans Sorunu:
    Bu method her çağrıldığında layouttaki tüm view hiyerarşisini tarar ve id'si eşleşen view'ı
    return eder. Bolca view'ın kullanıldığı projelerde her çağrımda tüm view hiyerarşisini taramak
    çok iyi performans alamamıza sebep olacaktır.

    2. Kod Okunabilirliği ve Zamandan Kayıp:
    Her view için findViewById() methodunu kullanarak bind etmemiz gerektiğinde fazla view içeren
    projelerde fazla kod yazmış olacağız.

    3. NullPointerException Sorunu:
    Örneğin B layoutunda myTextView id'sine sahip bir view'ımız olsun. Biz A layout'unun activity
    classında bu id'yi kullanarak findViewById() methodunu çağırdığımızda bu method geriye null
    return eder.

    4. Tip Güvensizliği:
    Örneğin A ve B layout'larında aynı id'ye sahip 2 view olsun. A layoutundaki view TextView,
    B layoutundaki view ImageView olsun. Biz developer olarak A layoutunun activity class'ında
    findViewById methodunu ImageView olarak tipinde kullanırsak ClassCastException hatası alırız.

DataBinding Nedir?
 - Uygulamadaki UI bileşenleri (textView vb.) ve veriler(textview'da göstermek istediğimiz data vb.)
 arasındaki bağlantıyı kotlin koduyla yapmak yerine xml'de, bildirimsel olarak veri bağlamayı sağ-
 layan bir yapıdır.
 - DataBinding, view'ları xml üzerinde nesneler ile bağlama işlemidir.
 - DataBinding, data'yı view'a bağlamak demektir.
 - Veri odaklı kullanıcı arayüzleri(UI) için daha hızlı ve daha düzenli kod yazmamızı sağlayan
 bir yapıdır.

 Avantajları:
 - View'ları koda bağlamak için kullanılan ama complex bir yapı olan findViewById() methodu yerine
 dataBinding ile view'lara erişmeyi daha performanslı hale getiririz.
 - NullPointerException alma olasılığımızı düşürür.
 - Okunabilirliği arttırır.
 - View'ları xml üzerinde data ile bağlarken bildirimsel bir komut kullandığımız için herhangi bir
 hata durumunda compiler time'da hata gösterilecek ve run time'da hata almayacağız.
- Android databinding kullandığımızda her bir view’ı almak için bir kez view hiyerarşisini tararıyor
 ve bunu kullanıcı uygulama ile etkileşim halinde olduğu zamanda değil, uygulama başlangıcında yapıyor.
- Birden fazla değeri tek bir yerden kontrol etmemizi sağlar. Örneğin databinding ile bir objenin
değerini 100 textView'ın text'ine atayabiliriz. Ve sonradan bu text'lerin değişmesini istediğimizde
sadece objenin değerini değiştirmemiz yeterli olacaktır. Gidipte tek tek 100 view'ın text değerini
değiştirmemize gerek kalmayacak.

Android her bir view’ı almak için bir kez view hiyerarşisini tararıyor ve bunu kullanıcı
uygulama ile etkileşim halinde olduğu zamanda değil, uygulama başlangıcında yapıyor.

Sonuç olarak, küçük projeler için databinding çok gerekli görülmese bile,
 karmaşık yapıda ve hiyerarşisi derin olan projeler için findViewById ile view’ları tek tek
 tanımlayıp, çağırıp ve değer atamak yerine databinding ile bu işi daha performanslı
 ve daha kolay yoldan yapabilirsiniz.